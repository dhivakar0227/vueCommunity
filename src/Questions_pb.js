// source: src/proto/Questions/Questions.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.questionnaire.createQuestionsRequest', null, global);
goog.exportSymbol('proto.questionnaire.createQuestionsResponse', null, global);
goog.exportSymbol('proto.questionnaire.getQuestionsRequest', null, global);
goog.exportSymbol('proto.questionnaire.getQuestionsResponse', null, global);
goog.exportSymbol('proto.questionnaire.question', null, global);
goog.exportSymbol('proto.questionnaire.question.QuestionvalidvaluesCase', null, global);
goog.exportSymbol('proto.questionnaire.returnSameStringRequest', null, global);
goog.exportSymbol('proto.questionnaire.returnSameStringResponse', null, global);
goog.exportSymbol('proto.questionnaire.secondtype', null, global);
goog.exportSymbol('proto.questionnaire.updateQuestionsRequest', null, global);
goog.exportSymbol('proto.questionnaire.updateQuestionsResponse', null, global);
goog.exportSymbol('proto.questionnaire.yesno', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.question = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.questionnaire.question.oneofGroups_);
};
goog.inherits(proto.questionnaire.question, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.question.displayName = 'proto.questionnaire.question';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.getQuestionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.questionnaire.getQuestionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.getQuestionsRequest.displayName = 'proto.questionnaire.getQuestionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.getQuestionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.questionnaire.getQuestionsResponse.repeatedFields_, null);
};
goog.inherits(proto.questionnaire.getQuestionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.getQuestionsResponse.displayName = 'proto.questionnaire.getQuestionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.createQuestionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.questionnaire.createQuestionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.createQuestionsRequest.displayName = 'proto.questionnaire.createQuestionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.createQuestionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.questionnaire.createQuestionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.createQuestionsResponse.displayName = 'proto.questionnaire.createQuestionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.updateQuestionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.questionnaire.updateQuestionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.updateQuestionsRequest.displayName = 'proto.questionnaire.updateQuestionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.updateQuestionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.questionnaire.updateQuestionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.updateQuestionsResponse.displayName = 'proto.questionnaire.updateQuestionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.returnSameStringResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.questionnaire.returnSameStringResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.returnSameStringResponse.displayName = 'proto.questionnaire.returnSameStringResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.questionnaire.returnSameStringRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.questionnaire.returnSameStringRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.questionnaire.returnSameStringRequest.displayName = 'proto.questionnaire.returnSameStringRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.questionnaire.question.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.questionnaire.question.QuestionvalidvaluesCase = {
  QUESTIONVALIDVALUES_NOT_SET: 0,
  QUESTIONYESNO: 4,
  QUESTIONSECONDTYPE: 5
};

/**
 * @return {proto.questionnaire.question.QuestionvalidvaluesCase}
 */
proto.questionnaire.question.prototype.getQuestionvalidvaluesCase = function() {
  return /** @type {proto.questionnaire.question.QuestionvalidvaluesCase} */(jspb.Message.computeOneofCase(this, proto.questionnaire.question.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.question.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.question.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.question} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.question.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    questiondesc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    questiontype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    questionyesno: jspb.Message.getFieldWithDefault(msg, 4, 0),
    questionsecondtype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    questionvalid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.question}
 */
proto.questionnaire.question.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.question;
  return proto.questionnaire.question.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.question} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.question}
 */
proto.questionnaire.question.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestiondesc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestiontype(value);
      break;
    case 4:
      var value = /** @type {!proto.questionnaire.yesno} */ (reader.readEnum());
      msg.setQuestionyesno(value);
      break;
    case 5:
      var value = /** @type {!proto.questionnaire.secondtype} */ (reader.readEnum());
      msg.setQuestionsecondtype(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestionvalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.question.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.question.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.question} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.question.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuestiondesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuestiontype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!proto.questionnaire.yesno} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.questionnaire.secondtype} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getQuestionvalid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string questionId = 1;
 * @return {string}
 */
proto.questionnaire.question.prototype.getQuestionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.questionnaire.question} returns this
 */
proto.questionnaire.question.prototype.setQuestionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string questionDesc = 2;
 * @return {string}
 */
proto.questionnaire.question.prototype.getQuestiondesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.questionnaire.question} returns this
 */
proto.questionnaire.question.prototype.setQuestiondesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string questionType = 3;
 * @return {string}
 */
proto.questionnaire.question.prototype.getQuestiontype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.questionnaire.question} returns this
 */
proto.questionnaire.question.prototype.setQuestiontype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional yesno questionYesNo = 4;
 * @return {!proto.questionnaire.yesno}
 */
proto.questionnaire.question.prototype.getQuestionyesno = function() {
  return /** @type {!proto.questionnaire.yesno} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.questionnaire.yesno} value
 * @return {!proto.questionnaire.question} returns this
 */
proto.questionnaire.question.prototype.setQuestionyesno = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.questionnaire.question.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.questionnaire.question} returns this
 */
proto.questionnaire.question.prototype.clearQuestionyesno = function() {
  return jspb.Message.setOneofField(this, 4, proto.questionnaire.question.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.questionnaire.question.prototype.hasQuestionyesno = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional secondtype questionSecondType = 5;
 * @return {!proto.questionnaire.secondtype}
 */
proto.questionnaire.question.prototype.getQuestionsecondtype = function() {
  return /** @type {!proto.questionnaire.secondtype} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.questionnaire.secondtype} value
 * @return {!proto.questionnaire.question} returns this
 */
proto.questionnaire.question.prototype.setQuestionsecondtype = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.questionnaire.question.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.questionnaire.question} returns this
 */
proto.questionnaire.question.prototype.clearQuestionsecondtype = function() {
  return jspb.Message.setOneofField(this, 5, proto.questionnaire.question.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.questionnaire.question.prototype.hasQuestionsecondtype = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string questionValid = 6;
 * @return {string}
 */
proto.questionnaire.question.prototype.getQuestionvalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.questionnaire.question} returns this
 */
proto.questionnaire.question.prototype.setQuestionvalid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.getQuestionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.getQuestionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.getQuestionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.getQuestionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.getQuestionsRequest}
 */
proto.questionnaire.getQuestionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.getQuestionsRequest;
  return proto.questionnaire.getQuestionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.getQuestionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.getQuestionsRequest}
 */
proto.questionnaire.getQuestionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.getQuestionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.getQuestionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.getQuestionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.getQuestionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.questionnaire.getQuestionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.getQuestionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.getQuestionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.getQuestionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.getQuestionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionsliceList: jspb.Message.toObjectList(msg.getQuestionsliceList(),
    proto.questionnaire.question.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.getQuestionsResponse}
 */
proto.questionnaire.getQuestionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.getQuestionsResponse;
  return proto.questionnaire.getQuestionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.getQuestionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.getQuestionsResponse}
 */
proto.questionnaire.getQuestionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.questionnaire.question;
      reader.readMessage(value,proto.questionnaire.question.deserializeBinaryFromReader);
      msg.addQuestionslice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.getQuestionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.getQuestionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.getQuestionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.getQuestionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionsliceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.questionnaire.question.serializeBinaryToWriter
    );
  }
};


/**
 * repeated question questionSlice = 1;
 * @return {!Array<!proto.questionnaire.question>}
 */
proto.questionnaire.getQuestionsResponse.prototype.getQuestionsliceList = function() {
  return /** @type{!Array<!proto.questionnaire.question>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.questionnaire.question, 1));
};


/**
 * @param {!Array<!proto.questionnaire.question>} value
 * @return {!proto.questionnaire.getQuestionsResponse} returns this
*/
proto.questionnaire.getQuestionsResponse.prototype.setQuestionsliceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.questionnaire.question=} opt_value
 * @param {number=} opt_index
 * @return {!proto.questionnaire.question}
 */
proto.questionnaire.getQuestionsResponse.prototype.addQuestionslice = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.questionnaire.question, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.questionnaire.getQuestionsResponse} returns this
 */
proto.questionnaire.getQuestionsResponse.prototype.clearQuestionsliceList = function() {
  return this.setQuestionsliceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.createQuestionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.createQuestionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.createQuestionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.createQuestionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cquestion: (f = msg.getCquestion()) && proto.questionnaire.question.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.createQuestionsRequest}
 */
proto.questionnaire.createQuestionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.createQuestionsRequest;
  return proto.questionnaire.createQuestionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.createQuestionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.createQuestionsRequest}
 */
proto.questionnaire.createQuestionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.questionnaire.question;
      reader.readMessage(value,proto.questionnaire.question.deserializeBinaryFromReader);
      msg.setCquestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.createQuestionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.createQuestionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.createQuestionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.createQuestionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCquestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.questionnaire.question.serializeBinaryToWriter
    );
  }
};


/**
 * optional question cQuestion = 1;
 * @return {?proto.questionnaire.question}
 */
proto.questionnaire.createQuestionsRequest.prototype.getCquestion = function() {
  return /** @type{?proto.questionnaire.question} */ (
    jspb.Message.getWrapperField(this, proto.questionnaire.question, 1));
};


/**
 * @param {?proto.questionnaire.question|undefined} value
 * @return {!proto.questionnaire.createQuestionsRequest} returns this
*/
proto.questionnaire.createQuestionsRequest.prototype.setCquestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.questionnaire.createQuestionsRequest} returns this
 */
proto.questionnaire.createQuestionsRequest.prototype.clearCquestion = function() {
  return this.setCquestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.questionnaire.createQuestionsRequest.prototype.hasCquestion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.createQuestionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.createQuestionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.createQuestionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.createQuestionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cquestion: (f = msg.getCquestion()) && proto.questionnaire.question.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.createQuestionsResponse}
 */
proto.questionnaire.createQuestionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.createQuestionsResponse;
  return proto.questionnaire.createQuestionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.createQuestionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.createQuestionsResponse}
 */
proto.questionnaire.createQuestionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.questionnaire.question;
      reader.readMessage(value,proto.questionnaire.question.deserializeBinaryFromReader);
      msg.setCquestion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.createQuestionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.createQuestionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.createQuestionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.createQuestionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCquestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.questionnaire.question.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional question cQuestion = 1;
 * @return {?proto.questionnaire.question}
 */
proto.questionnaire.createQuestionsResponse.prototype.getCquestion = function() {
  return /** @type{?proto.questionnaire.question} */ (
    jspb.Message.getWrapperField(this, proto.questionnaire.question, 1));
};


/**
 * @param {?proto.questionnaire.question|undefined} value
 * @return {!proto.questionnaire.createQuestionsResponse} returns this
*/
proto.questionnaire.createQuestionsResponse.prototype.setCquestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.questionnaire.createQuestionsResponse} returns this
 */
proto.questionnaire.createQuestionsResponse.prototype.clearCquestion = function() {
  return this.setCquestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.questionnaire.createQuestionsResponse.prototype.hasCquestion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.questionnaire.createQuestionsResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.questionnaire.createQuestionsResponse} returns this
 */
proto.questionnaire.createQuestionsResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.updateQuestionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.updateQuestionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.updateQuestionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.updateQuestionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cquestion: (f = msg.getCquestion()) && proto.questionnaire.question.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.updateQuestionsRequest}
 */
proto.questionnaire.updateQuestionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.updateQuestionsRequest;
  return proto.questionnaire.updateQuestionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.updateQuestionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.updateQuestionsRequest}
 */
proto.questionnaire.updateQuestionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.questionnaire.question;
      reader.readMessage(value,proto.questionnaire.question.deserializeBinaryFromReader);
      msg.setCquestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.updateQuestionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.updateQuestionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.updateQuestionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.updateQuestionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCquestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.questionnaire.question.serializeBinaryToWriter
    );
  }
};


/**
 * optional question cQuestion = 1;
 * @return {?proto.questionnaire.question}
 */
proto.questionnaire.updateQuestionsRequest.prototype.getCquestion = function() {
  return /** @type{?proto.questionnaire.question} */ (
    jspb.Message.getWrapperField(this, proto.questionnaire.question, 1));
};


/**
 * @param {?proto.questionnaire.question|undefined} value
 * @return {!proto.questionnaire.updateQuestionsRequest} returns this
*/
proto.questionnaire.updateQuestionsRequest.prototype.setCquestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.questionnaire.updateQuestionsRequest} returns this
 */
proto.questionnaire.updateQuestionsRequest.prototype.clearCquestion = function() {
  return this.setCquestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.questionnaire.updateQuestionsRequest.prototype.hasCquestion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.updateQuestionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.updateQuestionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.updateQuestionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.updateQuestionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cquestion: (f = msg.getCquestion()) && proto.questionnaire.question.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.updateQuestionsResponse}
 */
proto.questionnaire.updateQuestionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.updateQuestionsResponse;
  return proto.questionnaire.updateQuestionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.updateQuestionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.updateQuestionsResponse}
 */
proto.questionnaire.updateQuestionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.questionnaire.question;
      reader.readMessage(value,proto.questionnaire.question.deserializeBinaryFromReader);
      msg.setCquestion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.updateQuestionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.updateQuestionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.updateQuestionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.updateQuestionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCquestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.questionnaire.question.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional question cQuestion = 1;
 * @return {?proto.questionnaire.question}
 */
proto.questionnaire.updateQuestionsResponse.prototype.getCquestion = function() {
  return /** @type{?proto.questionnaire.question} */ (
    jspb.Message.getWrapperField(this, proto.questionnaire.question, 1));
};


/**
 * @param {?proto.questionnaire.question|undefined} value
 * @return {!proto.questionnaire.updateQuestionsResponse} returns this
*/
proto.questionnaire.updateQuestionsResponse.prototype.setCquestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.questionnaire.updateQuestionsResponse} returns this
 */
proto.questionnaire.updateQuestionsResponse.prototype.clearCquestion = function() {
  return this.setCquestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.questionnaire.updateQuestionsResponse.prototype.hasCquestion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.questionnaire.updateQuestionsResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.questionnaire.updateQuestionsResponse} returns this
 */
proto.questionnaire.updateQuestionsResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.returnSameStringResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.returnSameStringResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.returnSameStringResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.returnSameStringResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.returnSameStringResponse}
 */
proto.questionnaire.returnSameStringResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.returnSameStringResponse;
  return proto.questionnaire.returnSameStringResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.returnSameStringResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.returnSameStringResponse}
 */
proto.questionnaire.returnSameStringResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.returnSameStringResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.returnSameStringResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.returnSameStringResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.returnSameStringResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.questionnaire.returnSameStringResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.questionnaire.returnSameStringResponse} returns this
 */
proto.questionnaire.returnSameStringResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.questionnaire.returnSameStringRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.questionnaire.returnSameStringRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.questionnaire.returnSameStringRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.returnSameStringRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.questionnaire.returnSameStringRequest}
 */
proto.questionnaire.returnSameStringRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.questionnaire.returnSameStringRequest;
  return proto.questionnaire.returnSameStringRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.questionnaire.returnSameStringRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.questionnaire.returnSameStringRequest}
 */
proto.questionnaire.returnSameStringRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.questionnaire.returnSameStringRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.questionnaire.returnSameStringRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.questionnaire.returnSameStringRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.questionnaire.returnSameStringRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.questionnaire.yesno = {
  YESNOUNKNOWN: 0,
  YESNONOTSETUP: 1,
  YES: 2,
  NO: 3
};

/**
 * @enum {number}
 */
proto.questionnaire.secondtype = {
  SECONDTYPEUNKNOWN: 0,
  SECONDTYPENOTSETUP: 1,
  HIGH: 2,
  LOW: 3
};

goog.object.extend(exports, proto.questionnaire);
